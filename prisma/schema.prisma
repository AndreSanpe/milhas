generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @unique @default(uuid())
  name           String
  email          String         @unique
  password       String
  cpf            String         @unique
  birthdate      String
  cellphone      String
  stripeCustomer String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt
  subscriptionId String?
  accounts       Account[]
  buybonus       BuyBonus[]
  buybumerangue  BuyBumerange[]
  buymiles       BuyMiles[]
  sellmiles      SellMiles[]
  subscriptions  Subscription[]

  @@map("users")
}

model Subscription {
  id                 String    @id @unique @default(uuid())
  subscriptionStatus Boolean
  userId             String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
  currentPeriodEnd   DateTime
  currentPeriodStart DateTime
  subscriptionId     String?
  user               User      @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model Account {
  id           String    @id @unique @default(uuid())
  name         String
  document     String
  statusLivelo Boolean
  priceLivelo  Float
  statusEsfera Boolean
  priceEsfera  Float
  statusLatam  Boolean
  priceLatam   Float
  statusAzul   Boolean
  priceAzul    Float
  statusSmiles Boolean
  priceSmiles  Float
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  user         User      @relation(fields: [userId], references: [id])

  @@map("accounts")
}

model BuyMiles {
  id              String    @id @unique @default(uuid())
  price           Float
  pointsQuantity  Int
  dateBuy         String
  program         String
  selectedAccount String
  cpf             String
  destiny         String?
  percentage      Int?
  creditCard      String?
  parcel          String?
  month           String?
  miles           Int?
  finalPrice      Float
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  transfer        Boolean?
  user            User      @relation(fields: [userId], references: [id])

  @@map("buymiles")
}

model SellMiles {
  id               String    @id @unique @default(uuid())
  pointsQuantity   Int
  priceBuy         Float
  priceSell        Float
  program          String
  programBuyer     String
  selectedAccount  String
  cpf              String
  receipt          Int?
  dateSell         String?
  dateReceipt      String?
  profit           Float
  percentageProfit Float
  userId           String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  user             User      @relation(fields: [userId], references: [id])

  @@map("sellmiles")
}

model BuyBonus {
  id                 String    @id @unique @default(uuid())
  product            String
  price              Float
  pointsForReal      Int
  program            String
  pointsQuantity     Int
  currencyOption     String?
  pointsCard         Float?
  pointsCardQuantity Int?
  totalpoints        Int?
  destiny            String?
  percentage         Int?
  miles              Int?
  secureValue        Float?
  sellPrice          Float
  priceMiles         Float
  percentageProfit   Float
  finalPrice         Float
  score              Boolean?
  priceProtection    Boolean?
  transfer           Boolean?
  userId             String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@map("buybonus")
}

model BuyBumerange {
  id               String    @id @unique @default(uuid())
  price            Float
  pointsQuantity   Int
  dateBuy          String
  selectedAccount  String
  cpf              String
  program          String
  destinyOne       String
  percentage       Int
  miles            Int?
  returnPercentage Int?
  points           Int?
  transfer         Boolean?
  percentageTwo    Int?
  destinyTwo       String?
  milesTwo         Int?
  totalMiles       Int
  finalPrice       Float
  userId           String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  user             User      @relation(fields: [userId], references: [id])

  @@map("buybumerangue")
}
