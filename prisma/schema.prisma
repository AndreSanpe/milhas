// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  name      String
  email     String      @unique
  password  String
  cpf       String
  birthdate String
  cellphone String
  status    Boolean     @default(true)
  accounts  Account[]
  buymiles  BuyMiles[]
  sellmiles SellMiles[]
  buybonus  BuyBonus[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("users")
}

model Account {
  id           Int     @id @default(autoincrement())
  name         String
  document     String
  statusLivelo Boolean
  priceLivelo  Float
  statusEsfera Boolean
  priceEsfera  Float
  statusLatam  Boolean
  priceLatam   Float
  statusAzul   Boolean
  priceAzul    Float
  statusSmiles Boolean
  priceSmiles  Float

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("accounts")
}

model BuyMiles {
  id              Int    @id @default(autoincrement())
  price           Float
  pointsQuantity  Int
  program         String
  selectedAccount String
  cpf             String

  destiny    String?
  percentage Int?
  creditCard String?
  parcel     String?
  month      String?
  miles      Int?

  finalPrice Float

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("buymiles")
}

model SellMiles {
  id              Int    @id @default(autoincrement())
  pointsQuantity  Int
  priceBuy        Float
  priceSell       Float
  program         String
  programBuyer    String
  selectedAccount String

  receipt     Int?
  dateSell    String?
  dateReceipt String?

  profit           Float
  percentageProfit Float

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("sellmiles")
}

model BuyBonus {
  id             Int    @id @default(autoincrement())
  product        String
  price          Float
  pointsForReal  Int
  program        String
  pointsQuantity Int

  pointsCardQuantity Int?
  totalpoints        Int?
  destiny            String?
  percentage         Int?
  miles              Int?
  secureValue        Float?

  sellPrice        Float
  priceMiles       Float
  percentageProfit Float
  finalPrice       Float

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("buybonus")
}
