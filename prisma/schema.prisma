// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @unique @default(uuid())
  name           String
  email          String         @unique
  password       String
  cpf            String         @unique
  birthdate      String
  cellphone      String
  stripeCustomer String?
  subscriptionId String?
  accounts       Account[]
  buymiles       BuyMiles[]
  sellmiles      SellMiles[]
  buybonus       BuyBonus[]
  subscriptions  Subscription[]
  buybumerangue  BuyBumerange[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("users")
}

model Subscription {
  id                 String   @id @unique @default(uuid())
  subscriptionId     String?
  subscriptionStatus Boolean
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("subscriptions")
}

model Account {
  id           String  @id @unique @default(uuid())
  name         String
  document     String
  statusLivelo Boolean
  priceLivelo  Float
  statusEsfera Boolean
  priceEsfera  Float
  statusLatam  Boolean
  priceLatam   Float
  statusAzul   Boolean
  priceAzul    Float
  statusSmiles Boolean
  priceSmiles  Float

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("accounts")
}

model BuyMiles {
  id              String @id @unique @default(uuid())
  price           Float
  pointsQuantity  Int
  dateBuy         String
  program         String
  selectedAccount String
  cpf             String

  transfer   Boolean?
  destiny    String?
  percentage Int?
  creditCard String?
  parcel     String?
  month      String?
  miles      Int?

  finalPrice Float

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("buymiles")
}

model SellMiles {
  id              String @id @unique @default(uuid())
  pointsQuantity  Int
  priceBuy        Float
  priceSell       Float
  program         String
  programBuyer    String
  selectedAccount String
  cpf             String

  receipt     Int?
  dateSell    String?
  dateReceipt String?

  profit           Float
  percentageProfit Float

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("sellmiles")
}

model BuyBonus {
  id             String @id @unique @default(uuid())
  product        String
  price          Float
  pointsForReal  Int
  program        String
  pointsQuantity Int

  currencyOption     String?
  pointsCard         Float?
  pointsCardQuantity Int?
  totalpoints        Int?
  destiny            String?
  percentage         Int?
  miles              Int?
  secureValue        Float?

  sellPrice        Float
  priceMiles       Float
  percentageProfit Float
  finalPrice       Float

  score           Boolean?
  priceProtection Boolean?
  transfer        Boolean?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("buybonus")
}

model BuyBumerange {
  id String @id @unique @default(uuid())

  price           Float
  pointsQuantity  Int
  dateBuy         String
  selectedAccount String
  cpf             String

  program    String
  destinyOne String
  percentage Int
  miles      Int?

  returnPercentage Int?
  points           Int?

  transfer      Boolean?
  percentageTwo Int?
  destinyTwo    String?
  milesTwo      Int?

  totalMiles Int
  finalPrice Float

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("buybumerangue")
}
